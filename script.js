'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputTemp = document.querySelector('.form__input--temp');
const inputClimb = document.querySelector('.form__input--climb');
const rmWorkouts = document.querySelector('.remove__allworkouts');

//–∫–ª–∞—Å—Å Workout –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∏–π –¥–ª—è –¥–≤—É—Ö –≤–∏–¥–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
class Workout {
  date = new Date();
  id = String(Date.now()).slice(-10);
  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance; //km
    this.duration = duration; //min
  }

  _setDescription() {
    this.type === 'running'
      ? (this.desciption = `–ü—Ä–æ–±–µ–∂–∫–∞ ${new Intl.DateTimeFormat(
          navigator.language
        ).format(this.date)}`)
      : (this.desciption = `–í–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${new Intl.DateTimeFormat(
          navigator.language
        ).format(this.date)}`);
  }
}

//–∫–ª–∞—Å—Å –ë–µ–≥
class Running extends Workout {
  type = 'running';
  //temp - —Ç–µ–º–ø (—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
  //pace - —Å–∫–æ—Ä–æ—Å—Ç—å —à–∞–≥–∞
  constructor(coords, distance, duration, temp) {
    super(coords, distance, duration);
    this.temp = temp;
    this.calculatePace();
    this._setDescription();
  }
  //min/km
  calculatePace() {
    this.pace = this.duration / this.distance;
  }
}

//–∫–ª–∞—Å—Å –í–µ–ª–∏–∫
class Cycling extends Workout {
  type = 'cycling';
  //climb - –ø–æ–¥—å–µ–º
  //speed - —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ–ª–∏–∫–∞
  constructor(coords, distance, duration, climb) {
    super(coords, distance, duration);
    this.climb = climb;
    this.calculateSpeed();
    this._setDescription();
  }
  //km/h
  calculateSpeed() {
    this.speed = this.distance / this.duration / 60;
  }
}

//–∫–ª–∞—Å—Å App —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã
class App {
  #map;
  #mapEvent;
  #workouts = [];

  constructor() {
    this._init();
  }

  async _init() {
    await this._getPosition();
    this._getLocalStorageData();
    inputType.addEventListener('change', this._toggleClimbField);
    form.addEventListener('submit', this._newWorkout.bind(this));
    rmWorkouts.addEventListener('click', this._deleteAllWorkouts);
    containerWorkouts.addEventListener('click', this._moveToWorkout.bind(this));
    containerWorkouts.addEventListener('click', this._deleteWorkout.bind(this));
  }

  //–ø–µ—Ä–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  async _getPosition() {
    if (navigator.geolocation) {
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject);
      });
      console.log(position);
      this._loadMap(position);
    } else {
      alert('cannot get ur geoposition');
    }
  }

  _loadMap(pos) {
    //–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã
    const {
      coords: { latitude, longitude },
    } = pos;
    const coords = [latitude, longitude];
    //–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–æ—Ç–µ–∫—É leaflet
    //–ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ setView(), —á–∏—Å–ª–æ 15 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–∞—Å—à—Ç–∞–±, —á–µ–º –±–æ–ª—å—à–µ —Ç–µ–º –±–ª–∏–∂–µ
    //—Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    //—Ç–∞–∫ –∂–µ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π map –Ω–∞—à—É —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
    this.#map = L.map('map').setView(coords, 13);
    //—ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–º–æ–π –∫–∞—Ä—Ç—ã, –æ—Å–æ–±–æ –∫–æ–≤—ã—Ä—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);
    //—Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –∫–∞—Ä—Ç—É
    //–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É
    //–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞
    //—Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é mapevent –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É —Å–æ–±—ã—Ç–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ª—é–±—É—é —Ç–æ—á–∫—É –∫–∞—Ä—Ç—ã
    this.#map.on('click', this._showForm.bind(this));
    return this.#map;
  }

  _showForm(e) {
    //—Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
    this.#mapEvent = e;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _toggleClimbField() {
    inputTemp.closest('.form__row').classList.toggle('form__row--hidden');
    inputClimb.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    //–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const { lat, lng } = this.#mapEvent.latlng;
    //—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —á–∏—Å–ª–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Ñ–∞–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º(NaN –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –∏ —Ç–¥)
    const areNumbers = (...numbers) =>
      numbers.every(num => Number.isFinite(num));
    //—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —á–∏—Å–ª–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω—É—Å–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    const areNumbersPositive = (...numbers) => numbers.every(num => num > 0);
    e.preventDefault();
    //–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const workoutType = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    //—Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç –≤–∏–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∏–Ω—É—Ç—å –≤ –º–∞—Å—Å–∏–≤ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    let workout;
    //–µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–µ–∂–∞, —Å–æ–∑–¥–∞—Ç—å –æ–±—å–µ–∫—Ç —Ä–∞–Ω–∏–Ω–≥
    if (workoutType === 'running') {
      const temp = +inputTemp.value;
      //–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (
        !areNumbers(distance, duration, temp) ||
        !areNumbersPositive(distance, duration, temp)
      )
        return alert('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      //—Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      workout = new Running([lat, lng], distance, duration, temp);
    }
    //–µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ–ª–∏–∫, —Å–æ–∑–¥–∞—Ç—å –æ–±—å–µ–∫—Ç —Å–∞–π–∫–ª–∏–Ω–≥
    if (workoutType === 'cycling') {
      const climb = +inputClimb.value;
      //–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (
        !areNumbers(distance, duration, climb) ||
        !areNumbersPositive(distance, duration)
      )
        return alert('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
      //—Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      workout = new Cycling([lat, lng], distance, duration, climb);
    }

    //–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—å–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this.#workouts.push(workout);

    //–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
    this._displayWorkout(workout);

    //–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
    this._displayWorkoutOnSidebar(workout);

    //—Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É –∏ –æ—á–∏—Å–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    this._hideForm();

    //–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    this._addWorkoutsToLocalStorage();

    //–∞–ª–µ—Ä—Ç –¥–ª—è —É–¥–∞—á–∏
    document.querySelector('.good__luck').style.opacity = 0.8;
    setTimeout(function () {
      document.querySelector('.good__luck').style.opacity = 0;
    }, 5000);
  }

  _displayWorkout(workout) {
    //—Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 200,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'} ${workout.desciption}`
      )
      .openPopup();
  }

  //–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  _displayWorkoutOnSidebar(workout) {
    let html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
    <h2 class="workout__title">${
      workout.desciption
    }<span class="workout__remove">‚ùå</span></h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>`;
    if (workout.type === 'running') {
      html += `<div class="workout__details">
    <span class="workout__icon">üìè‚è±</span>
    <span class="workout__value">${workout.pace.toFixed(2)}</span>
    <span class="workout__unit">–º–∏–Ω/–∫–º</span>
  </div>
  <div class="workout__details">
    <span class="workout__icon">üëü‚è±</span>
    <span class="workout__value">${workout.temp}</span>
    <span class="workout__unit">—à–∞–≥/–º–∏–Ω</span>
  </div>
  </li>`;
    }
    if (workout.type === 'cycling') {
      html += `<div class="workout__details">
        <span class="workout__icon">üìè‚è±</span>
        <span class="workout__value">${workout.speed.toFixed(2)}</span>
        <span class="workout__unit">–∫–º/—á</span>
      </div>
      <div class="workout__details">
        <span class="workout__icon">üèî</span>
        <span class="workout__value">${workout.climb}</span>
        <span class="workout__unit">–º</span>
      </div>
      </li>`;
    }

    document.querySelector('.workouts').insertAdjacentHTML('beforeend', html);
  }

  //—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
  _hideForm() {
    inputDistance.value =
      inputClimb.value =
      inputDuration.value =
      inputTemp.value =
        '';
    form.classList.add('hidden');
  }

  //–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  //–∫–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–º–µ—Ä–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Ç—É–¥–∞
  _moveToWorkout(e) {
    const workoutElement = e.target.closest('.workout');
    if (!workoutElement) return;
    const workout = this.#workouts.find(
      value => value.id === workoutElement.dataset.id
    );
    //–º–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    this.#map.setView(workout.coords, 17, {
      animate: true,
      pan: {
        duration: 1,
      },
    });
  }

  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ª–æ–∫–∞–ª–∫—É
  _addWorkoutsToLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
  }

  //–ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª–∫–∏
  _getLocalStorageData() {
    const data = JSON.parse(localStorage.getItem('workouts'));
    if (!data) return;

    this.#workouts = data;
    this.#workouts.forEach(workout => {
      this._displayWorkoutOnSidebar(workout);
      this._displayWorkout(workout);
    });
  }

  //—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  _deleteAllWorkouts() {
    localStorage.removeItem('workouts');
    location.reload();
  }

  //—É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _deleteWorkout(e) {
    if (e.target.classList.contains('workout__remove')) {
      const workoutInfo = e.target.closest('.workout');

      const targetWorkout = this.#workouts.find(
        value => value.id === workoutInfo.dataset.id
      );
      const allWorkouts = JSON.parse(localStorage.getItem('workouts'));
      if (!allWorkouts) return;
      const workoutIndex = allWorkouts.findIndex(
        value => value.id === targetWorkout.id
      );
      allWorkouts.splice(workoutIndex, 1);
      localStorage.clear();
      localStorage.setItem('workouts', JSON.stringify(allWorkouts));
      location.reload();
    }
  }
}

//–∑–∞–ø—É—Å–∫
const app = new App();
